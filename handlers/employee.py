from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from constants import *
from data_utils import load_data
from handlers.test import ask_test_question


async def choose_specialty_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = update.message.text
    context.user_data['specialty'] = specialty
    data = load_data()
    tests = data['specialties'].get(specialty, {}).get('tests', [])
    materials = data['specialties'].get(specialty, {}).get('materials', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    context.user_data['tests'] = tests
    context.user_data['materials'] = materials

    keyboard = [["üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"]]
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ¬´{specialty}¬ª. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )

    return CHOOSE_ACTION_AFTER_SPECIALTY


async def handle_action_after_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text

    if choice == "üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        materials = context.user_data.get('materials', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        await update.message.reply_text(materials, reply_markup=ReplyKeyboardRemove())
        context.user_data.clear()
        return ConversationHandler.END

    elif choice == "üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é":
        tests = context.user_data.get('tests', [])
        if not tests:
            await update.message.reply_text("‚ùóÔ∏è –¢–µ—Å—Ç–æ–≤ –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç.",
                                            reply_markup=ReplyKeyboardRemove())
            context.user_data.clear()
            return await ask_test_question(update.message, context)

        context.user_data['test_index'] = 0
        context.user_data['correct_answers'] = 0
        return await ask_test_question(update.message, context)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
        return CHOOSE_ACTION_AFTER_SPECIALTY
