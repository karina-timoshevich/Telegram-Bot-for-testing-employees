from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from constants import *
from data_utils import load_data
from handlers.test import ask_test_question


async def choose_specialty_prompt_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    specialties = list(data['specialties'].keys())

    if not specialties:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π.")
        return ConversationHandler.END

    specialties_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n" + \
                       "\n".join([f"{i + 1}. {spec}" for i, spec in enumerate(specialties)]) + \
                       "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –æ—Ç–º–µ–Ω—ã):"

    await update.message.reply_text(specialties_text, reply_markup=ReplyKeyboardRemove())
    context.user_data['specialties_list'] = specialties
    return CHOOSE_SPECIALTY_EMPLOYEE


async def choose_specialty_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    specialties = context.user_data.get('specialties_list', [])

    if text.lower() == "–Ω–∞–∑–∞–¥":
        keyboard = [["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=reply_markup
        )
        return CHOOSE_ROLE

    try:
        index = int(text) - 1
        if index < 0 or index >= len(specialties):
            raise ValueError

        specialty = specialties[index]
        context.user_data['specialty'] = specialty
        data = load_data()
        tests = data['specialties'].get(specialty, {}).get('tests', [])
        materials = data['specialties'].get(specialty, {}).get('materials', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        context.user_data['tests'] = tests
        context.user_data['materials'] = materials

        keyboard = [
            ["üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
            ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return CHOOSE_ACTION_AFTER_SPECIALTY

    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSE_SPECIALTY_EMPLOYEE


async def handle_action_after_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip().lower()

    if choice == "üîô –Ω–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...")
        return await choose_specialty_prompt_employee(update, context)
    elif choice == "üìö –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        materials = context.user_data.get('materials', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        keyboard = [
            ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
            ["üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"],
            ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            materials,
            reply_markup=reply_markup
        )
        return CHOOSE_AFTER_MATERIALS
    elif choice == "üìù –ø—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é":
        tests = context.user_data.get('tests', [])
        if not tests:
            await update.message.reply_text(
                "‚ùóÔ∏è –¢–µ—Å—Ç–æ–≤ –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            )
            return CHOOSE_ACTION_AFTER_SPECIALTY

        context.user_data['test_index'] = 0
        context.user_data['correct_answers'] = 0
        return await ask_test_question(update.message, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return CHOOSE_ACTION_AFTER_SPECIALTY


async def handle_after_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip().lower()

    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    clean_choice = ''.join(c for c in choice if c.isalpha() or c.isspace()).strip().lower()
    print('CLEAN CHOICE ', clean_choice)
    if clean_choice == "–ø—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é":
        tests = context.user_data.get('tests', [])
        if not tests:
            await update.message.reply_text(
                "‚ùóÔ∏è –¢–µ—Å—Ç–æ–≤ –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            )
            return CHOOSE_AFTER_MATERIALS

        context.user_data['test_index'] = 0
        context.user_data['correct_answers'] = 0
        return await ask_test_question(update.message, context)

    elif clean_choice == "–ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        materials = context.user_data.get('materials', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        keyboard = [
            ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
            ["üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"],
            ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            materials,
            reply_markup=reply_markup
        )
        return CHOOSE_AFTER_MATERIALS

    elif clean_choice == "–∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
        return await choose_specialty_prompt_employee(update, context)

    elif clean_choice == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data.clear()
        from .common import start
        return await start(update, context)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return CHOOSE_AFTER_MATERIALS
