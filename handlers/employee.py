from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from constants import *
from data_utils import load_data
from handlers.common import filter_specialties_with_subtypes
from handlers.test import ask_test_question


async def choose_specialty_prompt_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    specialties = filter_specialties_with_subtypes(data)

    if not specialties:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π.")
        return ConversationHandler.END

    specialties_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n" + \
                       "\n".join([f"{i + 1}. {spec}" for i, spec in enumerate(specialties)]) + \
                       "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª:"

    keyboard = ReplyKeyboardMarkup(
        [["üîô –ù–∞–∑–∞–¥"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(specialties_text, reply_markup=keyboard)
    context.user_data['specialties_list'] = specialties
    return CHOOSE_SPECIALTY_EMPLOYEE


async def choose_specialty_employee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    specialties = context.user_data.get('specialties_list', [])

    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [["–£—á–µ–Ω–∏–∫", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–ê–¥–º–∏–Ω"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=reply_markup
        )
        return CHOOSE_ROLE

    try:
        index = int(text) - 1
        if index < 0 or index >= len(specialties):
            raise ValueError

        specialty = specialties[index]
        context.user_data['specialty'] = specialty
        data = load_data()
        tests = data['specialties'].get(specialty, {}).get('tests', [])
        materials = data['specialties'].get(specialty, {}).get('materials', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        context.user_data['tests'] = tests
        context.user_data['materials'] = materials

        keyboard = [
            ["üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
            ["üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return CHOOSE_ACTION_AFTER_SPECIALTY

    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSE_SPECIALTY_EMPLOYEE


async def handle_action_after_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()

    if choice == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...",
                                     reply_markup=ReplyKeyboardRemove())
        return await choose_specialty_prompt_employee(update, context)

    elif choice == "üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        materials = context.user_data.get('materials', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        specialty = context.user_data.get('specialty')
        data = load_data()
        attachments = data['specialties'][specialty].get("attachments", [])

        text_to_send = materials.strip() if materials.strip() else "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
        await update.message.reply_text(text_to_send)

        if attachments:
            for doc in attachments:
                await update.message.reply_document(doc["file_id"], filename=doc["file_name"])
        else:
            await update.message.reply_text("üì≠ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        keyboard = [
            ["üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
            ["üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"],
            ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return CHOOSE_AFTER_MATERIALS

    elif choice == "üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        specialty = context.user_data.get("specialty")
        data = load_data()
        attachments = data['specialties'].get(specialty, {}).get("twi_attachments", [])

        if attachments:
            await update.message.reply_text(f"üìÇ TWI –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {specialty}")
            for doc in attachments:
                await update.message.reply_document(doc["file_id"], filename=doc["file_name"])
        else:
            await update.message.reply_text("üì≠ TWI –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        keyboard = [
            ["üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
            ["üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
            ["üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return CHOOSE_ACTION_AFTER_SPECIALTY

    elif choice == "üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é":
        tests = context.user_data.get('tests', [])
        if not tests:
            keyboard = [
                ["üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
                ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
                ["üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
                ["üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"],
                ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            await update.message.reply_text(
                "‚ùóÔ∏è –¢–µ—Å—Ç–æ–≤ –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return CHOOSE_ACTION_AFTER_SPECIALTY
        return await ask_employee_fio(update, context)

    elif choice == "üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
        if 'materials_sent' in context.user_data:
            del context.user_data['materials_sent']
        return await choose_specialty_prompt_employee(update, context)

    elif choice == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data.clear()
        from .common import start
        return await start(update, context)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return CHOOSE_ACTION_AFTER_SPECIALTY


async def handle_after_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()

    if choice == "üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é":
        tests = context.user_data.get('tests', [])
        if not tests:
            keyboard = [
                ["üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
                ["üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
                ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
                ["üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"],
                ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            await update.message.reply_text(
                "‚ùóÔ∏è –¢–µ—Å—Ç–æ–≤ –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return CHOOSE_ACTION_AFTER_SPECIALTY
        return await ask_employee_fio(update, context)

    elif choice == "üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        materials = context.user_data.get('materials', "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        specialty = context.user_data.get('specialty')
        data = load_data()
        attachments = data['specialties'][specialty].get("attachments", [])

        text_to_send = materials.strip() if materials.strip() else "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
        await update.message.reply_text(text_to_send)

        if attachments:
            for doc in attachments:
                await update.message.reply_document(doc["file_id"], filename=doc["file_name"])
        else:
            await update.message.reply_text("üì≠ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        keyboard = [
            ["üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
            ["üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"],
            ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return CHOOSE_AFTER_MATERIALS

    elif choice == "üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        specialty = context.user_data.get("specialty")
        data = load_data()
        attachments = data['specialties'].get(specialty, {}).get("twi_attachments", [])

        if attachments:
            await update.message.reply_text(f"üìÇ TWI –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {specialty}")
            for doc in attachments:
                await update.message.reply_document(doc["file_id"], filename=doc["file_name"])
        else:
            await update.message.reply_text("üì≠ TWI –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        keyboard = [
            ["üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
            ["üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
            ["üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return CHOOSE_AFTER_MATERIALS

    elif choice == "üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
        if 'materials_sent' in context.user_data:
            del context.user_data['materials_sent']
        return await choose_specialty_prompt_employee(update, context)

    elif choice == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data.clear()
        from .common import start
        return await start(update, context)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return CHOOSE_AFTER_MATERIALS


async def ask_employee_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üîô –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª):",
        reply_markup=reply_markup
    )
    return ENTER_EMPLOYEE_NAME


async def receive_employee_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "üîô –ù–∞–∑–∞–¥":
        keyboard = [
            ["üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"],
            ["üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            ["üìù –ü—Ä–æ–π—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é"],
            ["üîô –ö –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"],
            ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return CHOOSE_AFTER_MATERIALS

    if not text:
        await update.message.reply_text("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return ENTER_EMPLOYEE_NAME

    context.user_data['employee_fio'] = text
    context.user_data['telegram_username'] = update.message.from_user.username or "‚Äî"
    context.user_data['telegram_id'] = update.message.from_user.id

    context.user_data['test_index'] = 0
    context.user_data['correct_answers'] = 0

    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, {text}. –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!", reply_markup=ReplyKeyboardRemove())
    from handlers.test import ask_test_question
    return await ask_test_question(update.message, context)

