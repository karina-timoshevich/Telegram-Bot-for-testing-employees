from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from constants import *
from data_utils import load_data, save_data
from handlers.reports import send_full_report
from .common import start


async def enter_password_mentor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data.clear()
        await update.message.reply_text(
            "–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:",
            reply_markup=ReplyKeyboardMarkup(
                [["–£—á–µ–Ω–∏–∫", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–ê–¥–º–∏–Ω"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return CHOOSE_ROLE

    if text == MENTOR_PASSWORD:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except:
            pass
        return await mentor_menu(update, context)

    else:
        keyboard = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                                        reply_markup=keyboard)
        return ENTER_PASSWORD_MENTOR


async def mentor_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìö –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
        [KeyboardButton("üóÇ –£–ü–î")],
        [KeyboardButton("üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton("üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MENTOR_MENU


async def handle_mentor_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice == "üîô –ù–∞–∑–∞–¥":
        context.user_data.clear()
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏.",
            reply_markup=ReplyKeyboardMarkup(
                [["–£—á–µ–Ω–∏–∫", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫", "–ê–¥–º–∏–Ω"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return CHOOSE_ROLE
    elif choice == "üìö –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        return await choose_specialty_for_mentor_file(update, context, file_key="attachments", display_name="–º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    elif choice == "üóÇ –£–ü–î":
        return await choose_specialty_for_mentor_file(update, context, file_key="upd_attachments", display_name="–£–ü–î")
    elif choice == "üß™ TWI ‚Äì –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        return await choose_specialty_for_mentor_file(update, context, file_key="twi_attachments", display_name="TWI")
    elif choice == "üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç":
        context.user_data.pop("in_specialty_correction", None)
        return await send_full_report(update, context, role="mentor")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")
        return MENTOR_MENU

async def choose_specialty_for_mentor_file(update: Update, context: ContextTypes.DEFAULT_TYPE, file_key: str, display_name: str):
    data = load_data()
    specialties = list(data["specialties"].keys())

    if not specialties:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π.")
        return MENTOR_MENU

    text = f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {display_name}:\n\n" + \
           "\n".join([f"{i + 1}. {spec}" for i, spec in enumerate(specialties)]) + \
           "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª."

    keyboard = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True, one_time_keyboard=True)

    context.user_data['specialties_list'] = specialties
    context.user_data['mentor_file_key'] = file_key
    context.user_data['mentor_display_name'] = display_name

    await update.message.reply_text(text, reply_markup=keyboard)
    return CHOOSE_SPECIALTY_FOR_MENTOR_FILE


async def send_files_for_specialty_to_mentor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üîô –ù–∞–∑–∞–¥":
        return await mentor_menu(update, context)

    specialties = context.user_data.get("specialties_list", [])
    try:
        index = int(text) - 1
        if index < 0 or index >= len(specialties):
            raise ValueError

        specialty = specialties[index]
        file_key = context.user_data.get("mentor_file_key")
        display_name = context.user_data.get("mentor_display_name")

        data = load_data()
        attachments = data["specialties"].get(specialty, {}).get(file_key, [])

        if not attachments:
            await update.message.reply_text(f"üì≠ –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ¬´{specialty}¬ª –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ {display_name}.")
        else:
            await update.message.reply_text(f"üìÇ {display_name} –¥–ª—è ¬´{specialty}¬ª:")
            for doc in attachments:
                await update.message.reply_document(doc["file_id"], filename=doc["file_name"])

        return await mentor_menu(update, context)

    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return CHOOSE_SPECIALTY_FOR_MENTOR_FILE
