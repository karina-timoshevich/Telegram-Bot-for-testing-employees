from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from constants import *
from data_utils import load_data, save_data
from .common import start


async def enter_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data.clear()
        await update.message.reply_text(
            "–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:",
            reply_markup=ReplyKeyboardMarkup(
                [["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return CHOOSE_ROLE

    if text == MENTOR_PASSWORD:
        return await mentor_menu(update, context)
    else:
        keyboard = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                                        reply_markup=keyboard)
        return ENTER_PASSWORD


async def choose_specialty_mentor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = update.message.text
    context.user_data['specialty'] = specialty
    await update.message.reply_text(f"üìö –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty}.\n–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥—É—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ç–µ—Å—Ç—ã.")
    return MENTOR_MENU


async def mentor_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
        [KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MENTOR_MENU


async def handle_mentor_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()
    if choice == "üîô –ù–∞–∑–∞–¥":
        context.user_data.clear()
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏.",
            reply_markup=ReplyKeyboardMarkup(
                [["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return CHOOSE_ROLE

    elif choice == "üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        data = load_data()
        specialties = list(data['specialties'].keys())
        if not specialties:
            await update.message.reply_text("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞.")
            return MENTOR_MENU

        keyboard = [[spec] for spec in specialties]
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:",
                                        reply_markup=reply_markup)
        return CHOOSE_SPECIALTY_FOR_EDIT

    elif choice == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã":
        data = load_data()
        specialties = list(data['specialties'].keys())
        if not specialties:
            await update.message.reply_text("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.")
            return MENTOR_MENU

        keyboard = [[spec] for spec in specialties]
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:", reply_markup=reply_markup)
        return CHOOSE_SPECIALTY_FOR_TEST_EDIT

    elif choice == "üîô –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)

    elif choice == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å":
        return await add_specialty_start(update, context)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")
        return MENTOR_MENU


async def add_specialty_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=ReplyKeyboardRemove())
    return ADD_SPECIALTY_NAME


async def add_specialty_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty_name = update.message.text.strip()
    data = load_data()

    if specialty_name in data['specialties']:
        await update.message.reply_text("–¢–∞–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return ADD_SPECIALTY_NAME

    data['specialties'][specialty_name] = {
        "materials": "",
        "tests": []
    }
    save_data(data)
    await update.message.reply_text(f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ¬´{specialty_name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ‚úÖ")
    return await mentor_menu(update, context)


async def choose_specialty_for_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = update.message.text.strip()

    if specialty == "üîô –ù–∞–∑–∞–¥":
        return await mentor_menu(update, context)

    data = load_data()
    if specialty not in data['specialties']:
        await update.message.reply_text("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return CHOOSE_SPECIALTY_FOR_EDIT

    context.user_data['edit_specialty'] = specialty
    materials = data['specialties'][specialty].get('materials', '')
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ ¬´{specialty}¬ª:\n\n{materials if materials else '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.'}\n\n"
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):",
        reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    )
    return EDIT_MATERIALS_INPUT


async def save_edited_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_text = update.message.text.strip()

    if new_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        data = load_data()
        specialties = list(data['specialties'].keys())
        keyboard = [[spec] for spec in specialties]
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:",
            reply_markup=reply_markup
        )
        return CHOOSE_SPECIALTY_FOR_EDIT

    specialty = context.user_data.get('edit_specialty')
    if not specialty:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return MENTOR_MENU

    data = load_data()
    data['specialties'][specialty]['materials'] = new_text
    save_data(data)

    await update.message.reply_text(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ ¬´{specialty}¬ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                                    reply_markup=ReplyKeyboardRemove())
    return await mentor_menu(update, context)


async def handle_test_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip()

    if choice == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
        return ADD_TEST_QUESTION

    elif choice == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        return await choose_question_to_edit(update, context)

    elif choice == "üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        specialty = context.user_data['edit_specialty']
        data = load_data()
        tests = data['specialties'][specialty].get('tests', [])

        if not tests:
            await update.message.reply_text("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return await show_test_edit_menu(update, context)

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        return DELETE_QUESTION

    elif choice == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞":
        return await mentor_menu(update, context)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return EDIT_TEST_MENU


async def choose_question_to_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = context.user_data['edit_specialty']
    data = load_data()
    tests = data['specialties'][specialty].get('tests', [])

    try:
        if not tests:
            await update.message.reply_text("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return await show_test_edit_menu(update, context)

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
        return EDIT_EXISTING_QUESTION
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞.")
        return EDIT_TEST_MENU


async def choose_edit_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        index = int(update.message.text.strip()) - 1
        specialty = context.user_data['edit_specialty']
        data = load_data()
        tests = data['specialties'][specialty]['tests']
        if index < 0 or index >= len(tests):
            raise ValueError

        context.user_data['edit_index'] = index
        keyboard = [["–í–æ–ø—Ä–æ—Å", "–í–∞—Ä–∏–∞–Ω—Ç—ã", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"], ["üîô –ù–∞–∑–∞–¥"]]
        await update.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                                        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return CHOOSE_EDIT_TYPE
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return EDIT_EXISTING_QUESTION


async def delete_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞":
        return await show_test_edit_menu(update, context)

    try:
        index = int(text) - 1
        specialty = context.user_data['edit_specialty']
        data = load_data()
        tests = data['specialties'][specialty]['tests']

        if index < 0 or index >= len(tests):
            raise ValueError

        deleted = tests.pop(index)
        save_data(data)

        await update.message.reply_text(f"‚úÖ –í–æ–ø—Ä–æ—Å ¬´{deleted['question']}¬ª —É–¥–∞–ª—ë–Ω.")
        return await show_test_edit_menu(update, context)

    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return DELETE_QUESTION


async def edit_question_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    specialty = context.user_data['edit_specialty']
    index = context.user_data['edit_index']
    data = load_data()
    data['specialties'][specialty]['tests'][index]['question'] = text
    save_data(data)
    await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    return await show_test_edit_menu(update, context)


async def edit_question_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().split('\n')
    if len(text) < 2:
        await update.message.reply_text("–ú–∏–Ω–∏–º—É–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
        return EDIT_QUESTION_OPTIONS

    specialty = context.user_data['edit_specialty']
    index = context.user_data['edit_index']
    data = load_data()
    data['specialties'][specialty]['tests'][index]['options'] = text
    save_data(data)
    await update.message.reply_text("‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    return await show_test_edit_menu(update, context)


async def edit_question_correct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        correct = int(update.message.text.strip())
        specialty = context.user_data['edit_specialty']
        index = context.user_data['edit_index']
        options = load_data()['specialties'][specialty]['tests'][index]['options']
        if correct < 1 or correct > len(options):
            raise ValueError

        data = load_data()
        data['specialties'][specialty]['tests'][index]['correct'] = correct
        save_data(data)
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
        return await show_test_edit_menu(update, context)
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return EDIT_QUESTION_CORRECT


async def show_test_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = context.user_data['edit_specialty']
    data = load_data()
    tests = data['specialties'][specialty].get('tests', [])

    if not tests:
        text = "üîπ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞."
    else:
        text = "üìù –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        for i, q in enumerate(tests, 1):
            text += f"{i}. {q['question']} (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {q['correct']})\n"

    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"]
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(text, reply_markup=reply_markup)
    return EDIT_TEST_MENU


async def choose_specialty_for_test_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = update.message.text.strip()

    if specialty == "üîô –ù–∞–∑–∞–¥":
        return await mentor_menu(update, context)

    data = load_data()
    if specialty not in data['specialties']:
        await update.message.reply_text("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CHOOSE_SPECIALTY_FOR_TEST_EDIT

    context.user_data['edit_specialty'] = specialty
    context.user_data['test_edit_index'] = None
    return await show_test_edit_menu(update, context)


async def add_test_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_question'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):")
    return ADD_TEST_OPTIONS


async def add_test_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    options = update.message.text.strip().split('\n')
    if len(options) < 2:
        await update.message.reply_text("–ú–∏–Ω–∏–º—É–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ADD_TEST_OPTIONS

    context.user_data['new_options'] = options
    reply_markup = ReplyKeyboardMarkup([[str(i + 1)] for i in range(len(options))], resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:", reply_markup=reply_markup)
    return ADD_TEST_CORRECT


async def add_test_correct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        correct_index = int(update.message.text.strip()) - 1
        options = context.user_data['new_options']
        if not (0 <= correct_index < len(options)):
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ADD_TEST_CORRECT

    specialty = context.user_data['edit_specialty']
    data = load_data()
    tests = data['specialties'][specialty].get('tests', [])

    new_test = {
        "question": context.user_data['new_question'],
        "options": options,
        "correct": correct_index + 1
    }
    tests.append(new_test)
    data['specialties'][specialty]['tests'] = tests
    save_data(data)

    await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())
    return await show_test_edit_menu(update, context)


async def edit_question_text_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    return EDIT_QUESTION_TEXT


async def edit_question_options_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É:")
    return EDIT_QUESTION_OPTIONS


async def edit_question_correct_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    specialty = context.user_data['edit_specialty']
    index = context.user_data['edit_index']
    data = load_data()
    options = data['specialties'][specialty]['tests'][index]['options']
    keyboard = ReplyKeyboardMarkup([[str(i + 1)] for i in range(len(options))], resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:", reply_markup=keyboard)
    return EDIT_QUESTION_CORRECT